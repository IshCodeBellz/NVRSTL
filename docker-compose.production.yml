# Production Docker Compose Configuration
# Use this for deploying DY Official in production environments

version: "3.8"

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: dy-official:latest
    container_name: dy-official-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - REDIS_URL=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - dy-network
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dy-official-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dyofficial}
      - POSTGRES_USER=${POSTGRES_USER:-dyofficial}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
    networks:
      - dy-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-dyofficial} -d ${POSTGRES_DB:-dyofficial}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security: Only expose to internal network
    expose:
      - "5432"
    command: >
      postgres
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dy-official-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - dy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Security: Only expose to internal network
    expose:
      - "6379"

  # Nginx Reverse Proxy (optional, for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: dy-official-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - app
    networks:
      - dy-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database backup service
  db-backup:
    image: postgres:16-alpine
    container_name: dy-official-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups:rw
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - dy-network
    # Run backup via cron or manual execution
    # docker-compose run --rm db-backup sh /backup.sh

networks:
  dy-network:
    driver: bridge
    name: dy-official-network

volumes:
  postgres_data:
    name: dy-official-postgres-data
    driver: local
  redis_data:
    name: dy-official-redis-data
    driver: local
# Health check and monitoring
# Use: docker-compose ps
# Use: docker-compose logs -f app
# Use: docker-compose exec app sh (for debugging)
