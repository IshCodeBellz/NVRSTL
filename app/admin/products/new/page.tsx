/* eslint-disable */
"use client";
import { useEffect, useState } from "react";
import { BASE_CURRENCY } from "@/lib/currency";
import { useRouter } from "next/navigation";
import Link from "next/link";
import JerseyOptionsEditor from "@/components/admin/JerseyOptionsEditor";

interface ImageInput {
  url: string;
  alt?: string;
}
interface SizeInput {
  label: string;
  stock: number;
}

export const dynamic = "force-dynamic";

interface MetaBrand {
  id: string;
  name: string;
}
interface MetaCategory {
  id: string;
  name: string;
  slug: string;
  parentId?: string | null;
}

export default function NewProductPage() {
  const router = useRouter();
  const [sku, setSku] = useState("");
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState("");
  const [images, setImages] = useState<ImageInput[]>([{ url: "", alt: "" }]);
  const [sizes, setSizes] = useState<SizeInput[]>([{ label: "", stock: 0 }]);
  const [brandId, setBrandId] = useState<string>("");
  const [categoryId, setCategoryId] = useState<string>("");
  const [brands, setBrands] = useState<MetaBrand[]>([]);
  const [categories, setCategories] = useState<MetaCategory[]>([]);
  const [productType, setProductType] = useState<string>("");
  const [gender, setGender] = useState<string>("");
  const [isJersey, setIsJersey] = useState(false);
  const [jerseyConfig, setJerseyConfig] = useState<string>("");

  useEffect(() => {
    fetch("/api/admin/meta")
      .then((r) => (r.ok ? r.json() : Promise.reject()))
      .then((d) => {
        if (d.brands) setBrands(d.brands);
        if (d.categories) setCategories(d.categories);
      })
      .catch(() => {});
  }, []);

  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  function updateImage(idx: number, patch: Partial<ImageInput>) {
    setImages((prev) =>
      prev.map((img, i) => (i === idx ? { ...img, ...patch } : img))
    );
  }
  function addImage() {
    setImages((p) => [...p, { url: "", alt: "" }]);
  }
  function removeImage(i: number) {
    setImages((p) => p.filter((_, idx) => idx !== i));
  }

  function updateSize(idx: number, patch: Partial<SizeInput>) {
    setSizes((prev) =>
      prev.map((s, i) => (i === idx ? { ...s, ...patch } : s))
    );
  }
  function addSize() {
    setSizes((p) => [...p, { label: "", stock: 0 }]);
  }
  function removeSize(i: number) {
    setSizes((p) => p.filter((_, idx) => idx !== i));
  }

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    // Basic client-side validation
    const priceNum = parseFloat(price);
    if (Number.isNaN(priceNum) || priceNum < 0) {
      setError("Enter a valid non-negative price");
      return;
    }
    // jerseyConfig is generated by the editor; still keep a light guard
    if (isJersey && jerseyConfig.trim()) {
      try {
        JSON.parse(jerseyConfig);
      } catch {
        setError("Jersey options appear invalid");
        return;
      }
    }
    setSubmitting(true);
    try {
      const priceCents = Math.round(priceNum * 100);
      const payload = {
        sku: sku.trim(),
        name: name.trim(),
        description: description.trim(),
        priceCents,
        brandId: brandId || undefined,
        categoryId: categoryId || undefined,
        gender: gender || undefined,
        productType: productType || undefined,
        isJersey,
        jerseyConfig: jerseyConfig.trim() || undefined,
        images: images
          .filter((i) => i.url.trim())
          .map((i, idx) => ({ ...i, position: idx })),
        sizes: sizes
          .filter((s) => s.label.trim())
          .map((s) => ({ label: s.label.trim(), stock: s.stock || 0 })),
      };
      const res = await fetch("/api/admin/products", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const text = await res.text();
      let data: any = null;
      try {
        data = text ? JSON.parse(text) : null;
      } catch {
        // non-JSON response, keep raw text
      }
      if (!res.ok) {
        if (data?.error === "sku_exists") setError("SKU already exists");
        else if (data?.error === "invalid_payload")
          setError("Validation failed");
        else if (data?.error === "invalid_brand")
          setError("Invalid brand selected");
        else if (data?.error === "invalid_category")
          setError("Invalid category selected");
        else if (data?.error === "duplicate_sizes")
          setError("Duplicate size labels");
        else if (data?.error === "forbidden") setError("Not an admin");
        else if (data?.error === "unauthorized") setError("Sign in required");
        else if (data?.error === "server_error" && data?.message)
          setError(String(data.message).slice(0, 500));
        else if (typeof text === "string" && text.trim())
          setError(text.trim().slice(0, 300));
        else setError(`Request failed (${res.status})`);
      } else {
        router.push(`/admin/products`);
        router.refresh();
      }
    } catch {
      setError("Network error");
    } finally {
      setSubmitting(false);
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto p-6 space-y-8">
        {/* Header Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Create New Product
              </h1>
              <p className="text-gray-600 mt-1">
                Add a new product to your catalog
              </p>
            </div>
            <Link
              href="/admin"
              className="text-sm rounded bg-neutral-200 text-neutral-900 px-3 py-2 hover:bg-neutral-300"
            >
              Back to Dashboard
            </Link>
          </div>
        </div>

        {/* Main Form */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">
              Product Information
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              Fill in the details for your new product
            </p>
          </div>

          <form onSubmit={onSubmit} className="p-6 space-y-8">
            {/* Basic Information */}
            <div className="space-y-6">
              <h3 className="text-md font-medium text-gray-900 border-b border-gray-200 pb-2">
                Basic Information
              </h3>
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    SKU *
                  </label>
                  <input
                    value={sku}
                    onChange={(e) => setSku(e.target.value)}
                    required
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter product SKU"
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Product Type
                  </label>
                  <select
                    value={productType}
                    onChange={(e) => {
                      setProductType(e.target.value);
                      setGender(""); // Reset gender when product type changes
                    }}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select Product Type</option>
                    <option value="clothing">Clothing</option>
                    <option value="shoes">Shoes</option>
                    <option value="accessories">Accessories</option>
                  </select>
                </div>
                {(productType === "clothing" || productType === "shoes") && (
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Gender
                    </label>
                    <select
                      value={gender}
                      onChange={(e) => setGender(e.target.value)}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Select Gender</option>
                      <option value="men">Men</option>
                      <option value="women">Women</option>
                      <option value="unisex">Unisex</option>
                    </select>
                  </div>
                )}
                {productType === "accessories" && (
                  <div className="space-y-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Gender
                    </label>
                    <select
                      value={gender}
                      onChange={(e) => setGender(e.target.value)}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Select Gender</option>
                      <option value="men">Men</option>
                      <option value="women">Women</option>
                      <option value="unisex">Unisex</option>
                    </select>
                  </div>
                )}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Product Name *
                  </label>
                  <input
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter product name"
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Brand
                  </label>
                  <select
                    value={brandId}
                    onChange={(e) => setBrandId(e.target.value)}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select a brand (optional)</option>
                    {brands.map((b) => (
                      <option key={b.id} value={b.id}>
                        {b.name}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Category
                  </label>
                  <select
                    value={categoryId}
                    onChange={(e) => setCategoryId(e.target.value)}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select a category (optional)</option>
                    {categories.map((c) => {
                      const parent = categories.find(
                        (p) => p.id === c.parentId
                      );
                      const label = parent
                        ? `${parent.name} / ${c.name}`
                        : c.name;
                      return (
                        <option key={c.id} value={c.id}>
                          {label}
                        </option>
                      );
                    })}
                  </select>
                </div>
              </div>
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-700">
                  Description *
                </label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  required
                  rows={4}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter product description"
                />
              </div>
              <div className="space-y-2 max-w-xs">
                <label className="block text-sm font-medium text-gray-700">
                  Price ({BASE_CURRENCY}) *
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">£</span>
                  </div>
                  <input
                    value={price}
                    onChange={(e) => setPrice(e.target.value)}
                    required
                    type="number"
                    step="0.01"
                    min="0"
                    className="w-full border border-gray-300 rounded-md pl-7 pr-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0.00"
                  />
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  Enter price in {BASE_CURRENCY}. Stored as integer minor units
                  (cents).
                </p>
              </div>
            </div>

            {/* Images Section */}
            <div className="space-y-6">
              <h3 className="text-md font-medium text-gray-900 border-b border-gray-200 pb-2">
                Product Images
              </h3>
              <div className="space-y-4">
                {images.map((img, i) => (
                  <div
                    key={i}
                    className="bg-gray-50 p-4 rounded-lg border border-gray-200"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="text-sm font-medium text-gray-700">
                        Image {i + 1}{" "}
                        {i === 0 && <span className="text-red-500">*</span>}
                      </h4>
                      {images.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeImage(i)}
                          className="text-sm text-red-600 hover:text-red-800 font-medium"
                        >
                          Remove
                        </button>
                      )}
                    </div>
                    <div className="grid md:grid-cols-2 gap-3">
                      <div className="space-y-1">
                        <label className="block text-xs font-medium text-gray-600">
                          Image URL
                        </label>
                        <input
                          placeholder="https://example.com/image.jpg"
                          value={img.url}
                          onChange={(e) =>
                            updateImage(i, { url: e.target.value })
                          }
                          required={i === 0}
                          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                      <div className="space-y-1">
                        <label className="block text-xs font-medium text-gray-600">
                          Alt Text
                        </label>
                        <input
                          placeholder="Describe the image"
                          value={img.alt}
                          onChange={(e) =>
                            updateImage(i, { alt: e.target.value })
                          }
                          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addImage}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                >
                  + Add Another Image
                </button>
              </div>
            </div>

            {/* Jersey Options */}
            <div className="space-y-6">
              <h3 className="text-md font-medium text-gray-900 border-b border-gray-200 pb-2">
                Jersey Options
              </h3>
              <label className="inline-flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={isJersey}
                  onChange={(e) => setIsJersey(e.target.checked)}
                />
                Mark as Jersey (enable customizations)
              </label>
              {isJersey && (
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Jersey Options
                  </label>
                  <JerseyOptionsEditor
                    value={jerseyConfig}
                    onChange={(json) => setJerseyConfig(json)}
                  />
                </div>
              )}
            </div>

            {/* Sizes Section */}
            <div className="space-y-6">
              <h3 className="text-md font-medium text-gray-900 border-b border-gray-200 pb-2">
                Available Sizes
              </h3>
              <div className="space-y-4">
                {sizes.map((s, i) => (
                  <div
                    key={i}
                    className="bg-gray-50 p-4 rounded-lg border border-gray-200"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="text-sm font-medium text-gray-700">
                        Size {i + 1}
                      </h4>
                      {sizes.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeSize(i)}
                          className="text-sm text-red-600 hover:text-red-800 font-medium"
                        >
                          Remove
                        </button>
                      )}
                    </div>
                    <div className="grid grid-cols-2 gap-3">
                      <div className="space-y-1">
                        <label className="block text-xs font-medium text-gray-600">
                          Size Label
                        </label>
                        <input
                          placeholder="e.g. S, M, L, XL"
                          value={s.label}
                          onChange={(e) =>
                            updateSize(i, { label: e.target.value })
                          }
                          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                      <div className="space-y-1">
                        <label className="block text-xs font-medium text-gray-600">
                          Stock Quantity
                        </label>
                        <input
                          placeholder="0"
                          type="number"
                          min={0}
                          value={s.stock}
                          onChange={(e) =>
                            updateSize(i, {
                              stock: parseInt(e.target.value || "0"),
                            })
                          }
                          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addSize}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                >
                  + Add Another Size
                </button>
              </div>
            </div>

            {/* Error Display */}
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-md p-4">
                <div className="flex">
                  <div className="text-sm text-red-700">{error}</div>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex gap-4 pt-6 border-t border-gray-200">
              <button
                disabled={submitting}
                type="submit"
                className="px-6 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {submitting ? "Creating Product..." : "Create Product"}
              </button>
              <button
                type="button"
                onClick={() => router.push("/admin/products")}
                className="px-6 py-2 border border-gray-300 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
